// Code generated by mockery v1.0.0. DO NOT EDIT.

package repository

import (
	iam "github.com/aws/aws-sdk-go/service/iam"
	mock "github.com/stretchr/testify/mock"
)

// MockIAMRepository is an autogenerated mock type for the MockIAMRepository type
type MockIAMRepository struct {
	mock.Mock
}

// ListAllAccessKeys provides a mock function with given fields:
func (_m *MockIAMRepository) ListAllAccessKeys() ([]*iam.AccessKeyMetadata, error) {
	ret := _m.Called()

	var r0 []*iam.AccessKeyMetadata
	if rf, ok := ret.Get(0).(func() []*iam.AccessKeyMetadata); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*iam.AccessKeyMetadata)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllPolicies provides a mock function with given fields:
func (_m *MockIAMRepository) ListAllPolicies() ([]*iam.Policy, error) {
	ret := _m.Called()

	var r0 []*iam.Policy
	if rf, ok := ret.Get(0).(func() []*iam.Policy); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*iam.Policy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllRolePolicies provides a mock function with given fields:
func (_m *MockIAMRepository) ListAllRolePolicies() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllRolePolicyAttachments provides a mock function with given fields: roleName
func (_m *MockIAMRepository) ListAllRolePolicyAttachments(roleName string) ([]*AttachedRolePolicy, error) {
	ret := _m.Called(roleName)

	var r0 []*AttachedRolePolicy
	if rf, ok := ret.Get(0).(func(string) []*AttachedRolePolicy); ok {
		r0 = rf(roleName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*AttachedRolePolicy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(roleName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllRoles provides a mock function with given fields:
func (_m *MockIAMRepository) ListAllRoles() ([]*iam.Role, error) {
	ret := _m.Called()

	var r0 []*iam.Role
	if rf, ok := ret.Get(0).(func() []*iam.Role); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*iam.Role)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllUserPolicies provides a mock function with given fields: userName
func (_m *MockIAMRepository) ListAllUserPolicies(userName string) ([]*string, error) {
	ret := _m.Called(userName)

	var r0 []*string
	if rf, ok := ret.Get(0).(func(string) []*string); ok {
		r0 = rf(userName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllUserPolicyAttachments provides a mock function with given fields: username
func (_m *MockIAMRepository) ListAllUserPolicyAttachments(username string) ([]*AttachedUserPolicy, error) {
	ret := _m.Called(username)

	var r0 []*AttachedUserPolicy
	if rf, ok := ret.Get(0).(func(string) []*AttachedUserPolicy); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*AttachedUserPolicy)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllUsers provides a mock function with given fields:
func (_m *MockIAMRepository) ListAllUsers() ([]*iam.User, error) {
	ret := _m.Called()

	var r0 []*iam.User
	if rf, ok := ret.Get(0).(func() []*iam.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*iam.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
